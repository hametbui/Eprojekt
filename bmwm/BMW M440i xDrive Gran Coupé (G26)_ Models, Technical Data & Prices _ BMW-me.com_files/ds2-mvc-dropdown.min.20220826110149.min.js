define('ds2-dropdown-model', [], function () {
    var DropdownModel = function(Emitter, options) {
        if (!Emitter || Emitter.name !== 'emitter') {
            throw new Error('DropdownModel: Emitter is required.');
        }

        this.emitter = Emitter;
        this.uid = this.emitter.uid;
        this._isOpen = options.isOpen || false;
        this._showFilter = options.showFilter || false;
        this._title = options.title || '';
        this._skipPreselection = options.skipPreselection || false;
    };

    DropdownModel.prototype.isOpen = function() {
        return this._isOpen;
    };

    DropdownModel.prototype.open = function() {
        this._isOpen = true;
        this.emitter.trigger('open');
    };

    DropdownModel.prototype.close = function() {
        this._isOpen = false;
        this.emitter.trigger('close');
    };

    DropdownModel.prototype.hasFilter = function() {
        return this._showFilter;
    };

    DropdownModel.prototype.showFilter = function() {
        this._showFilter = true;
        this.emitter.trigger('showFilter');
    };

    DropdownModel.prototype.hideFilter = function() {
        this._showFilter = false;
        this.emitter.trigger('hideFilter');
    };

    DropdownModel.prototype.setTitle = function(title) {
        if (this._title !== title) {
            this._title = title;
            this.emitter.trigger('title-change', this._title);
        }
    };

    DropdownModel.prototype.setItemList = function(items) {
        this.items = items;
    };

    DropdownModel.prototype.getListItems = function() {
        return this.items;
    };

    DropdownModel.prototype.setVisibleItems = function(items) {
        this.visibleItems = items;
        this.emitter.trigger('listitems-change', this.visibleItems);
    };

    DropdownModel.prototype.shouldPreselectItem = function() {
        return !this._skipPreselection;
    };

    return DropdownModel;
});

define('ds2-dropdown-view', ['ds2-accessibility'], function(Accessibility) {
    var DropdownView = function(options) {
        if (!options || !options.element) {
            throw new Error('DropdownView: Element is required.');
        }

        if (!options.emitter || !options.controller ||
            options.emitter.uid !== options.controller.uid) { // check if the same emitter is used both in the model and the controller

            throw new Error('DropdownView: Emitter and controller are required.')
        }

        this.accessibility = new Accessibility(this.element);

        this.element = options.element;
        this.emitter = options.emitter;
        this.controller = options.controller;
        this.access = options.accessibility;
        this.ddParentClass = options.parentClass || 'ds2-dropdown';
        this.hash = options.hash || '';

        // selector cache
        this.sel = {
            ddArea: this.ddParentClass + '-js-area',
            ddContainer: this.ddParentClass + '-js-container',
            ddItem: this.ddParentClass + '__js-item',
            ddTitle: this.ddParentClass + '__js-title',
            ddLink: this.ddParentClass + '__link',
            ddFilterInput: this.ddParentClass + '__filter',
            ddOpen: this.ddParentClass + '--open',
            ddFilterActive: this.ddParentClass + '--filter-active',
            ddItemActive: this.ddParentClass + '-list__item--active',
        };

        // elements
        this.title = this.element.getElementsByClassName(this.sel.ddTitle)[0];
        this.list = this.element.getElementsByClassName(this.sel.ddContainer)[0];
        this.toggle = this.element.getElementsByClassName(this.sel.ddArea)[0];
        this.quickSearch = this.element.getElementsByClassName(this.sel.ddFilterInput)[0];
        this.itemList = this.element.getElementsByClassName(this.sel.ddItem);

        // events
        this.toggle && this.toggle.addEventListener('click', this.controller.toggleOpen.bind(this.controller));
        this.list && this.list.addEventListener('click', this.selectItem.bind(this));
        this.quickSearch && this.quickSearch.addEventListener('input', this.controller.applyFilter.bind(this.controller));

        document.body.addEventListener('click', this.focusOut.bind(this));

        // emitter events
        this.emitter.on('open', this.open.bind(this));
        this.emitter.on('close', this.close.bind(this));
        this.emitter.on('showFilter', this.showFilter.bind(this));
        this.emitter.on('hideFilter', this.hideFilter.bind(this));
        this.emitter.on('title-change', this.changeTitle.bind(this));
        this.emitter.on('listitems-change', this.visibleItems.bind(this));

        // initialize
        this.init();
    };

    DropdownView.prototype.init = function() {
        this.controller.checkFilter();
        this.controller.setItemList(this.itemList);

        if (this.controller.shouldPreselectItem()) {
            this.preselectItem();
        }
    };

    DropdownView.prototype.preselectItem = function() {
        // check hash and set selected item
        var activeItem = this.element.querySelectorAll('[href="' + this.hash + '"]')[0];
        if (activeItem) {
            this.setActiveItem(activeItem);
        } else {
            // for drop-downs with full paths, if current page path is among them,
            // then preselect that item.
            var fallbackActiveItem = this.element.querySelectorAll('a[href*="' + document.location.pathname + '"]')[0];
            if (fallbackActiveItem) {
                const gearSelect = this.element.querySelector('.ds2-dropdown__gear-select-list');
                if (gearSelect) {
                    this.setgearDropdown(fallbackActiveItem, gearSelect);
                } else {
                    this.setActiveItem(fallbackActiveItem);
                }
            } else {
                var fallbackActiveItemWithClassActive = this.element.querySelectorAll('li.ds2-dropdown-list__item--active > a')[0];
                if (fallbackActiveItemWithClassActive) {
                    this.setActiveItem(fallbackActiveItemWithClassActive);
                } else {
                    this.setActiveItem(this.itemList[0]);
                }
            }
        }
    };

    DropdownView.prototype.open = function() {
        this.element.classList.add(this.sel.ddOpen);
        var activeElement = this.accessibility.getKeyboardFocusableElements(this.list.querySelector('.ds2-dropdown-list__item--active'));
        if (this.controller.hasFilter()) {
            setTimeout(function() {
                this.quickSearch.focus();
            }.bind(this), 10);
        } else {
            setTimeout(function () {
                var index = this.findItemIndex();
                this.access.updateFocusableElements(index);
                activeElement[0] && activeElement[0].focus();
            }.bind(this), 10);
        }
    };

    DropdownView.prototype.findItemIndex = function() {
        var activEle = this.list.querySelector('.ds2-dropdown-list__item--active');
        var index = activEle.querySelector('.ds2-link');
        return index.getAttribute('data-list-id');
    };

    DropdownView.prototype.close = function() {
        this.element.classList.remove(this.sel.ddOpen);
    };

    DropdownView.prototype.showFilter = function() {
        this.element.classList.add(this.sel.ddFilterActive);
    };

    DropdownView.prototype.hideFilter = function() {
        this.element.classList.remove(this.sel.ddFilterActive);
    };

    DropdownView.prototype.changeTitle = function(title) {
        this.title.innerText = title;
    };

    DropdownView.prototype.visibleItems = function(items) {
        var ids = items.map(function(item) {
            return item.id
        });
        for (var i = 0; i < this.itemList.length; i++) {
            var id = this.itemList[i].getElementsByTagName('a')[0].dataset.listId;
            if (ids.indexOf(id) >= 0) {
                this.itemList[i].style.display = '';
            } else {
                this.itemList[i].style.display = 'none';
            }
        }
    };

    DropdownView.prototype.selectItem = function(ev) {
        if (ev.target !== ev.currentTarget) {
            ev.stopPropagation();
            this.setActiveItem(ev.target);
        }
    };

    DropdownView.prototype.focusOut = function(ev) {
        if (this.controller.isOpen()) {
            var itemClicked = ev.target;
            if ((itemClicked !== this.element && !this.element.contains(itemClicked)) || itemClicked.classList.contains('ds2-dropdown-filter-wrapper')) {
                this.controller.close();
            }
        }
    };

    DropdownView.prototype.setActiveItem = function(item) {
        var items = this.element.getElementsByClassName(this.sel.ddItem);
        var itemsArray = [];
        for (var idx in items) {
            if (items.hasOwnProperty(idx)) {
                itemsArray.push(items[idx]);
            }
        }
        itemsArray.forEach(function(el) {
            if (el === item.parentNode) {
                el.classList.add(this.sel.ddItemActive);
            } else {
                el.classList.remove(this.sel.ddItemActive);
            }
        }.bind(this));

        this.controller.selectItem(item);
    };

    DropdownView.prototype.setgearDropdown = function (fallbackItem, gearSelect) {
        let url = document.location.href;
        const index = url.indexOf('content');
        url = url.substr(index);
        let item = gearSelect.querySelector('[href*="' + url + '"]');
        if (item) {
            this.setActiveItem(item);
        } else {
            this.setActiveItem(fallbackItem);
        }
    }

    return DropdownView;
});

define('ds2-dropdown-controller', [], function () {

    var DropdownController = function(model) {
        if (!model || !model.uid) {
            throw new Error('DropdownController: Model is required.');
        }

        this.model = model;
        this.uid = this.model.uid;
    };

    DropdownController.prototype.toggleOpen = function(ev) {
        ev.preventDefault();
        if (this.model.isOpen()) {
            this.model.close();
        } else {
            this.model.open();
        }
    };

    DropdownController.prototype.close = function(ev) {
        this.model.close();
    };

    DropdownController.prototype.isOpen = function(){
        return this.model.isOpen();

    };


    DropdownController.prototype.hasFilter = function() {
        return this.model.hasFilter();
    };

    DropdownController.prototype.checkFilter = function() {
        if (this.model.hasFilter()) {
            this.model.showFilter();
        } else {
            this.model.hideFilter();
        }
    };

    DropdownController.prototype.selectItem = function(el) {
        if (!el || el.getAttribute('tabindex') === '-1') { return }
        this.model.currentItem = el.getAttribute('data-list-id');
        this.model.setTitle(el.innerText.trim());
        this.model.close();
    };

    DropdownController.prototype.applyFilter = function(ev) {
        var filterText = ev.target.value.toLowerCase();
        var items = this.model.getListItems();
        var visibleItems = items.filter(function(item) {
            return item.value.indexOf(filterText) >= 0;
        });

        this.model.setVisibleItems(visibleItems);
    };

    DropdownController.prototype.setItemList = function(items) {
        var data = Array.prototype.slice.call(items).map(function(item) {
            var a = item.getElementsByTagName('a')[0];
            var id = a.dataset.listId;
            var val = a.innerText.toLowerCase();
            return {
                id: id,
                value: val,
            };
        });
        this.model.setItemList(data);

    };

    DropdownController.prototype.shouldPreselectItem = function() {
        return this.model.shouldPreselectItem();
    };

    return DropdownController;
});

define('ds2-dropdown-accessibility', [
    'ds2-touch-detection',
    'ds2-accessibility',
], function(touchDevice, Accessibility) {
    var DropdownAccessibility = function(options) {
        if (!options || !options.element) {
            throw new Error('Dropdown accessibility: Element is required.');
        }

        if (!options.emitter || !options.controller ||
            options.emitter.uid !== options.controller.uid) { // check if the same emitter is used both in the model and the controller
            throw new Error('DropdownView: Emitter and controller are required.')
        }

        this.element = options.element;
        this.emitter = options.emitter;
        this.controller = options.controller;
        this.accessibility = new Accessibility(this.element);

        // emitter events
        this.emitter.on('listitems-change', this.visibleItems.bind(this));

        this.isTouch = touchDevice.any;

        // WCAG
        this.focusIndex = -1;
        this.$dropdown = $(this.element);
        this.$dropdownEntries = this.$dropdown.find('ul');
        this.$dropdownEntrylist = this.$dropdown.find('.ds2-dropdown__box-shadow-wrapper');
        this.$dropdownFilter = this.$dropdown.find('.ds2-dropdown__filter');
        this.init();
        this.filterListener();
    };

    /**
     * Init accessibility features
     */
    DropdownAccessibility.prototype.init = function () {
        var self = this;

        // Close model dropdown via Escape
        this.accessibility.addKeyListener('down', {
            element: this.$dropdown,
            keyCodes: [this.accessibility.keyCodes.ESC],
            cancel: true,
            fn: function () {
                self.controller.close();
                self.focusIndex = self.focusableElements.length -1;
                setTimeout(function() {
                    self.$dropdown.find('button').focus();
                }.bind(this), 100);
            }
        });

        // focus next entry via arrow down or tab
        this.accessibility.addKeyListener('down', {
            element: this.$dropdownEntrylist,
            keyCodes: [this.accessibility.keyCodes.ARROW_DOWN, this.accessibility.keyCodes.TAB],
            cancel: true,
            fn: function () {
                self.focusNextDropdownItem();
            },
        });

        // focus previous entry via arrow key
        this.accessibility.addKeyListener('down', {
            element: this.$dropdownEntrylist,
            keyCodes: [this.accessibility.keyCodes.ARROW_UP],
            cancel: true,
            fn: function () {
                self.focusPreviousDropdownItem();
            },
        });

        // focus previous entry via arrow key
        this.accessibility.addKeyListener('down', {
            element: this.$dropdownEntrylist,
            keyCodes: [this.accessibility.keyCodes.TAB],
            cancel: true,
            shiftKey: true,
            fn: function () {
                self.focusPreviousDropdownItem();
            },
        });

        // Select focused entry
        this.accessibility.addKeyListener('down', {
            element: this.$dropdownEntries,
            keyCodes: [this.accessibility.keyCodes.SPACE, this.accessibility.keyCodes.ENTER],
            cancel: true,
            fn: function () {
                self.selectFocusedEntry();
            }
        });
        this.updateFocusableElements();
    };

    DropdownAccessibility.prototype.visibleItems = function() {
        setTimeout(function() { // wait until item visibility has changed
            this.updateFocusableElements();
        }.bind(this), 250);
    };

    /**
     * Select next model dropdown item
     */
    DropdownAccessibility.prototype.focusNextDropdownItem = function () {
        if (this.$dropdown.hasClass('ds2-dropdown--open')) {
            if(this.focusableElements.length === 1) {
                this.updateFocusableElements();
            }
            this.setFocusIndex(1);
            this.focusableElements[this.focusIndex].focus();
        }
    };

    /**
     * Select previous model dropdown item
     */
    DropdownAccessibility.prototype.focusPreviousDropdownItem = function () {
        if (this.$dropdown.hasClass('ds2-dropdown--open')) {
            if(this.focusableElements.length === 1) {
                this.updateFocusableElements();
            }
            this.setFocusIndex( -1);
            this.focusableElements[this.focusIndex].focus();
        }
    };

    /**
     * Update focusable elements, including filter input field
     */
    DropdownAccessibility.prototype.updateFocusableElements = function (index) {
        this.focusableElements = this.accessibility.getKeyboardFocusableElements(this.$dropdown.find('.ds2-dropdown-list'));
        if(this.controller.hasFilter()) {
            this.focusableElements.push(this.$dropdownFilter);
        }
        if(index) {
            this.focusIndex = parseInt(index, 10);
        } else {
            this.focusIndex = (this.focusableElements.length - 1);
        }
    };

    /**
     * Select focused entry
     */
    DropdownAccessibility.prototype.selectFocusedEntry = function () {
        if (this.isTouch) return;
        if (this.$dropdown.hasClass('ds2-dropdown--open')) {
            this.focusableElements[this.focusIndex].click();
            $(this.focusableElements[this.focusIndex]).addClass('ds2-dropdown-list__item--active');
            this.focusIndex = this.focusableElements.length -1;
            setTimeout(function() {
                this.$dropdown.find('button').focus();
            }.bind(this), 100);
        }
    };

    /**
     * Set focus index
     * @param direction
     */
    DropdownAccessibility.prototype.setFocusIndex = function (direction) {
        var focusableElementsLength = this.focusableElements.length;
        if(this.focusIndex === -1) {
            this.focusIndex = (focusableElementsLength - 1);
        } else if ((this.focusIndex === (focusableElementsLength- 1) && direction === 1)) {
            this.focusIndex = 0;
        } else if ((this.focusIndex === 0) && direction === -1) {
            this.focusIndex = focusableElementsLength - 1;
        } else {
            this.focusIndex = this.focusIndex + direction;
        }
    };

    DropdownAccessibility.prototype.filterListener = function () {
        this.filter = this.element.querySelector('.ds2-dropdown__filter')
        this.filter && this.filter.addEventListener('keyup', function () {
            var dropdownWrapper = this.parentElement.parentElement;
            var dropDownList = dropdownWrapper.querySelectorAll('.ds2-dropdown-list__item');
            var inputErrorMessage = dropdownWrapper.querySelector('.ds2-dropdown__error-message');
            if(inputErrorMessage) {
                inputErrorMessage.style.display = 'none';
                var counter = 0;
                for (var i = 0; i < dropDownList.length; i++) {
                    if (dropDownList[i].style.display === 'none') {
                        counter++;
                    }
                }
                if ((dropDownList.length - 1) < counter ) {
                    inputErrorMessage.removeAttribute('style');
                }
            }
        });
    };


    return DropdownAccessibility;
});

define('ds2-mvc-dropdown', [
    'ds2-mvc-emitter',
    'ds2-dropdown-model',
    'ds2-dropdown-controller',
    'ds2-dropdown-view',
    'ds2-dropdown-accessibility',
], function (Emitter, DropdownModel, DropdownController, DropdownView, DropdownAccessibility) {

    var Dropdown = function (element) {

        var emitter = new Emitter();
        // check if filter has to be shown
        var hideFilter = element.classList.contains('ds2-dropdown--filter-inactive');
        var skipPreselection = typeof element.dataset.skipPreselection !== 'undefined';
        var model = new DropdownModel(emitter, { isOpen: false, showFilter: !hideFilter, skipPreselection: skipPreselection });
        var controller = new DropdownController(model);
        var ddAccessibility = new DropdownAccessibility({
            element: element,
            emitter: emitter,
            controller: controller,
        });
        new DropdownView({
            element: element,
            emitter: emitter,
            controller: controller,
            accessibility: ddAccessibility,
            parentClass: 'ds2-dropdown',
            hash: window.location.hash,
            skipPreselection: true,
        });

        return emitter;
    };

    return Dropdown;
});

