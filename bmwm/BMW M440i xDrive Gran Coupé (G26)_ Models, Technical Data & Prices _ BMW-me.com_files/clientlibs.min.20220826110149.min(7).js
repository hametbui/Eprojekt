define("ds2-myoverlay-tron-tracking",[],(function(){return function(){var e={326:function(e,t,n){"use strict";n.r(t),t.default=class{constructor(){this.detectDebugMode(),this._TronVersion="0.7.0";const e=function(e){e.component={name:"mybmy overlay",type:"native in-page"},e.baseEvent={name:"interaction",type:"ux",action:"internal click",effect:"na",cause:"default",speed:"0"},e.baseCustom={loginStatus:""},e.baseDynamicData=["loginStatus"],e.allowedLoginStatus=["logged-in","not logged-in"]},t=function(e){e.events||(e.events={}),e.events=Object.assign(e.events,{flyoutOpenIntention:{event:{effect:"flyout open intention"},dynamicData:e.baseDynamicData,description:"trigger when meeple symbol is manually clicked to open flyout"},flyoutOpenAutomatic:{event:{effect:"flyout open",type:"success",cause:"automatic",action:"content load"},dynamicData:e.baseDynamicData.concat(["duration"]),description:"trigger when flyout is visible after automatic loading, e.g because of URL parameter on page load. Do not trigger on manual click. Parameter 'duration' measures time to load flyout in ms. Set performance mark and derive startTIme from mark for exact measure."},flyoutOpenManual:{event:{effect:"flyout open",type:"success"},dynamicData:e.baseDynamicData.concat(["duration"]),description:"trigger when flyout is visible after loading based on click. Parameter 'duration' measures time between click and flyout visible. Set performance marks on click and load and derive duration by using browser performance measure to get exact timings in ms"},flyoutCloseAutomatic:{event:{effect:"flyout closed",type:"success",cause:"automatic",action:"content closed"},dynamicData:e.baseDynamicData,description:"trigger when flyout being closed automatically, e.g. when customer clicks somewhere else on the screen. Do not trigger when customer clicked on link or on close button."},flyoutCloseManual:{event:{effect:"flyout closed",type:"success"},dynamicData:e.baseDynamicData,description:"trigger when flyout is manually closed by clicking on the close button (X). Do not trigger when overlay is closed because link is clicked."}})},n=function(e){e.defaultDatalayer={component:{},event:{},custom:{},version:e.version},e.events||(e.events={}),e.events.error={event:{name:"error",type:"",action:"internal click",speed:"0",cause:"default",effect:"na"},custom:{errorCode:"datalayer field empty",errorOrigin:"datalayer field empty",errorURL:document.location.href},dynamicData:["errorAction","errorMessage","errorCause","errorType","errorCode","errorOrigin"],description:"trigger when error occurs"},e._validErrorTypes=["backend 1st party","backend 3rd party","frontend component","frontend page","user","product data","emission service","web links"],e._validErrorActions=["call","component load","content closed","content opened","content visible","download","drop-down menu","first page load","form fill","internal  click","outbound click","page load","radio button","slide left","slide right","sort","suggested term","video pause","video play"],e.defaultValue="datalayer field empty"};(function(e){e.customEventName="TRON:myBMW overlay",e._componentTrackingVersion="myBMW-Overlay_v1",e.version=`TRON_${e._TronVersion}__${e._componentTrackingVersion}`})(this),n(this),e(this),t(this),this._createPublicMethods(),this.message={}}getSupportedEvents(){var e={};for(const t in this.events)e[t]={description:this.events[t].description,"expected dynamic data":this.events[t].dynamicData.toString()};return e}getExpectedDynamicData(e){return this.events[e]?[].concat(this.baseDynamicData,this.events[e].dynamicData):(this._throwError("Unknown event. Please call function getSupportedEvents to know all available events",new ReferenceError("event '"+e+"' is not supported. ")),!1)}setDebug(e){if("boolean"!=typeof e)return!1;this.debug=e}detectDebugMode(){let e=-1!=document.location.search.indexOf("trondebug");this.setDebug(e)}_createPublicMethods(e){for(const e in this.events)this[e]=function(e){return function(t){this._processEvent(`${e}`,t)}}(e)}_handleErrors(e){try{this._checkValidOption("errorType",e.errorType),this._checkValidOption("errorAction",e.errorAction)}catch(e){return void this._throwError("invalid data in error details",e)}this.message.event.type=e.errorType,this.message.event.action=e.errorAction,this.message.event.cause=e.errorCause,this.message.event.effect=e.errorMessage,this.message.custom.errorCode=e.errorCode,this.message.custom.errorOrigin=e.errorOrigin,this.message.custom.errorURL=e.errorURL}_processEvent(e,t){this._debug("ðŸ’¡ event triggered:"+e,t),this.message=this._loadEventData(e);try{this._checkDynamicData(e,t)}catch(t){return this._throwError("wrong dynamicData input for function "+e,t),!1}if("error"==e&&this._handleErrors(t),this.allowedLoginStatus.includes(t.loginStatus)){if(this.message.custom.loginStatus=t.loginStatus,t.duration){if("number"!=typeof t.duration)return void this._throwError(`invalid duration: ${t.duration}`,new SyntaxError("duration must be a number"));this.message.event.speed=Math.round(t.duration)}this._debug("ðŸ’² payload created",this.message),this._sendMessage()}else{let e=this.allowedLoginStatus.reduce(((e,t)=>`${e},${t}`));this._throwError("unknown value for 'loginStatus':"+t.loginStatus,new RangeError("Allowed values: "+e))}}_checkDynamicData(e,t){let n=this.events[e].dynamicData;for(let e=0;e<n.length;e++){let r=n[e],o=t[r];if(void 0===o)throw new SyntaxError(`missing key in dynamicData: ${r}`);if("string"==typeof o&&0==o.trim().length)throw new SyntaxError(`empty string in dynamicData: ${r}`)}return!0}_checkValidOption(e,t){let n=[];switch(e){case"errorType":n=this._validErrorTypes;break;case"errorAction":n=this._validErrorActions}if(!n.includes(t))throw new TypeError(`provided value '${t}' for field '${e}' is not part of standard list`);return!0}_loadEventData(e){const t=Object.assign({},this.defaultDatalayer);return t.component=Object.assign({},this.component),t.event=Object.assign({},this.baseEvent,this.events[e].event),t.event.timeStamp=(new Date).getTime(),this.events[e].custom=this.events[e].custom?this.events[e].custom:{},t.custom=Object.assign({},this.baseCustom,this.events[e].custom),t.version="TRON_"+this._TronVersion+"__"+this._componentTrackingVersion,t}_throwError(e,t){console.error(this.version,"\r\n",e,"\r\n",t.name+":"+t.message)}_debug(e,t){this.debug&&console.info(this.version,"\r\n",e,"\r\n",t)}_sendMessage(){this._debug("âŒ› sending data..."),this._sendCustomEvent(),this._sendPostMessage(),this.message={}}_sendCustomEvent(){let e=!1;try{e=new CustomEvent(this.customEventName,{detail:this.message}),window.dispatchEvent(e)}catch(e){return this._throwError("could not create/send custom event",e),!1}this._debug("âœ… custom event successfully sent",e)}_sendPostMessage(){let e=!1;try{e={methodName:this.customEventName,detail:this.message,type:"TRON"},window.top.postMessage(JSON.stringify(e),"*")}catch(e){return this._throwError("could not create/send postMessage",e),!1}this._debug("âœ… postmessage successful sent",e)}}},545:function(e,t,n){var r,o;r=[t,n(326)],void 0===(o=function(e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),t.default=void 0;var o=(n=(r=n)&&r.__esModule?r:{default:r}).default;t.default=o}.apply(t,r))||(e.exports=o)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={exports:{}};return e[r](s,s.exports,n),s.exports}return n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(545)}()}));